@mixin gridkit-context {
  $base: ();
  $-gridkit-context-list: base, !global;
  $-gridkit-context: (base: $base) !global;
  $-gridkit-current-context: base !global;
  @content;
}

@mixin gridkit-media($media) {
  @media #{$media} {
    @if not(map-has-key($-gridkit-context, $media)) {
      $media-obj: ();
      $-gridkit-context-list: append($-gridkit-context-list, $media) !global;
      $-gridkit-context: map-merge($-gridkit-context, ($media: $media-obj)) !global;
    }
    $-gridkit-current-context: $media !global;
    @content;
    $-gridkit-current-context: base !global;
  }
}

/// Iterate through all contexts, setting current context and yielding to content.
@mixin gridkit-each-context() {
  @for $i from 1 through length($-gridkit-context-list) {
    $-gridkit-current-context: nth($-gridkit-context-list, $i) !global;
    @if ($-gridkit-current-context == base) {
      @content;
    } @else {
      @media #{$-gridkit-current-context} {
        @content;
      }
    }
  }
  $-gridkit-current-context: base !global;
}

@function gridkit-current-context() {
  @return map-get($-gridkit-context, $-gridkit-current-context);
}

@function gridkit-update-context($content) {
  $context: map-merge(gridkit-current-context(), $content);
  $-gridkit-context: map-merge($-gridkit-context, ($-gridkit-current-context: $context)) !global;
  @return gridkit-current-context();
}


// In order to be compatible across grid and flex we need to translate repeats
// into explicit
@function repeat($count, $val) {
  $str: $val;
  @for $i from 2 through $count {
    $str: $str + " " + $val;
  }
  @return $str;
}

// Started from https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass
// modified to allow multiple contiguous separators
@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);

        @if (str-length($item) > 0) {
          // push item to array
          $split-arr: append($split-arr, $item);
        }
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

// Pass in a value that can be either 1 value or 2 (x y) and return x val
@function get-x($val) {
  @if length($val) == 1 {
    @return $val;
  } @else {
    @return nth($val, 1);
  }
}

// Pass in a value that can be either 1 value or 2 (x y) and return y val
@function get-y($val) {
  @if length($val) == 1 {
    @return $val;
  } @else {
    @return nth($val, 2);
  }
}

@function is-fr($value) {
  @return (str-index(inspect($value), 'fr') != null);
}

// $direction should be either columns or rows
@function translate-fr($value, $direction) {
  @if (is-fr($value)) {
    $gridkit-context: gridkit-current-context();
    $vals: str-split(map-get($gridkit-context, $direction), ' ');
    $numFrs: 0;
    $calcStr: '(0';
    @for $i from 1 through length($vals) {
      $val: nth($vals, $i);
      @if (is-fr($val)) {
        $numFrs: $numFrs + 1;
      } @else {
        $calcStr: '#{$calcStr} + #{$val}';
      }
    }
    $calcStr: '#{$calcStr})';
    $fr-value: '';
    @if ($numFrs == length($vals)) {
      $fr-value: 100% / $numFrs;
    } @else {
      $fr-value: '((100% - #{$calcStr}) / #{$numFrs})';
    }
    $val: nth(str-split($value, 'fr'), 1);
    @return '(#{$val} * #{$fr-value})';
  } @else {
    @return $value;
  }
}

@function get-areas-matrix {
  $areas: map-get(gridkit-current-context(), areas);
  $matrix: ();
  @for $i from 1 through length($areas) {
    $matrix: append($matrix, str-split(nth($areas, $i), " "));
  }
  @return $matrix;
}

@function update-area-map($map, $area, $x, $y) {
  $obj: (min-x: 9999999, min-y: 9999999, max-x: 0, max-y: 0);
  @if map-has-key($map, $area) {
    $obj: map-get($map, $area);
  }

  $min-x: min(map-get($obj, min-x), $x);
  $min-y: min(map-get($obj, min-y), $y);
  $max-x: max(map-get($obj, max-x), $x);
  $max-y: max(map-get($obj, max-y), $y);
  @return map-merge($map, ($area: (min-x: $min-x, min-y: $min-y, max-x: $max-x, max-y: $max-y)))
}

@function get-areas-map {
  $matrix: get-areas-matrix();
  $map: ();
  @for $y from 1 through length($matrix) {
    $row: nth($matrix, $y);
    @for $x from 1 through length($row) {
      $area: nth($row, $x);
      $map: update-area-map($map, $area, $x, $y);
    }
  }
  @return $map;
}

@function annotate-areas-map($map) {
  $gridkit-context: gridkit-current-context();
  $columns: map-get($gridkit-context, columns);
  $rows:    map-get($gridkit-context, rows);
  @if(type-of($columns) == 'string') {
    $columns: str-split($columns, ' ');
  }
  @if(type-of($rows) == 'string') {
    $rows: str-split($rows, ' ');
  }

  $areas: map-keys($map);
  @for $i from 1 through length($areas) {
    $key: nth($areas, $i);
    $area: map-get($map, $key);
    $widths: ();
    $heights: ();

    //TODO: Deal with auto (non explicit);
    @for $col from map-get($area, min-x) through map-get($area, max-x) {
      $width: auto;
      @if(length($columns) >= $col) {
        $width: translate-fr(nth($columns, $col), columns);
      }
      $widths: append($widths, $width);
    }
    @for $row from map-get($area, min-y) through map-get($area, max-y) {
      $height: auto;
      @if(length($rows) >= $row) {
        $height: translate-fr(nth($rows, $row), rows);
      }
      $heights: append($heights, $height);
    }
    $area: map-merge($area, (widths: $widths, heights: $heights));
    $map: map-merge($map, ($key: $area));
  }
  @return $map;
}

@function get-annotated-areas-map() {
  $map: get-areas-map();
  @return annotate-areas-map($map);
}

@function cached-areas-map {
  $gridkit-context: gridkit-current-context();
  @if map-has-key($gridkit-context, areas-map) {
    @return map-get($gridkit-context, areas-map);
  } @else {
    $gridkit-context: gridkit-update-context((areas-map: get-annotated-areas-map()));
    @return map-get($gridkit-context, areas-map);
  }
}

@function width-string($key) {
  @return -calc-str($key, widths);
}

@function height-string($key) {
  @return -calc-str($key, heights);
}

// $type should be widths or heights
@function -calc-str($key, $type) {
  $map: cached-areas-map();
  $area: map-get($map, $key);
  $values: map-get($area, $type);
  $x-gap: 0px;
  $gridkit-context: gridkit-current-context();
  @if map-has-key($gridkit-context, gap) {
    $x-gap: get-x(map-get($gridkit-context, gap));
  }

  $str: 'calc(' + nth($values, 1);
  @if (length($values) > 1) {
    @for $i from 2 through length($values) {
      $str: '#{$str} + #{nth($values, $i)}'
    }
  }
  $str: $str + ' - #{$x-gap})';
  @return $str;
}
